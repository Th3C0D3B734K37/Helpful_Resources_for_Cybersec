Malware Development ==>

17 August 2021
18:02


DISCLAIMER : anything collected here does not belong to me I have re-searched and collected all of the available resources.

You can find the sources at the end of files / sections ==>

Thank you ! 

The History of Malware
Since computers have been in use, enterprising programmers have been creating programs that modify their behavior. Some of these programs have been malicious - others productive, and others for entertainment. Here we will present a brief overview of the history of malware.
1971 - Before advanced attacks like STUXNET, there were simple programs that replicated games or cryptic messages to users. The "Creeper Virus" was created in 1971. Once a computer was infected, it displayed a short message to the user daring them to capture "the creeper". Created as an experiment, Creeper did not cause damage - but did foretell the future of malware with its quick spread through systems. "Reaper" was created to hunt and destroy Creeper - one of the first examples of an "anti-virus" program.
1978 - The first "Trojan" is released - a program called ANIMAL. ANIMAL did not destroy a system, but did pass itself along to other computers through copies on multi-user networks. While the user played a guessing game, the program would copy and move itself along.
1981 - "Elk Cloner" for the Apple II is developed. It spreads quickly across Apple II machines through floppy disks, and displays a short taunting poem.
1983 - The term "virus" is first used to describe a computer program in a novel by Frederick Cohen.
1986 - The first virus for IBM-PC computers is released.
1987 - The Jerusalem virus is released. Designed to destroy files on every occurrence of Friday the 13th, this is one of the first time-release viruses that have appeared repeatedly since.
1988 - The Morris Worm is created, and it spreads rapidly throughout the world, becoming the first worm to spread extensively via internet.
1992 - A media frenzy is created as the Michelangelo worm threatens to wipe machines around the world on March 6th. Damage is minimal, but the public profile of malware is raised.
1999 - More advanced malware such as the Happy99 virus, the Melissa worm, and Kak worm are released. These spread very quickly through Microsoft environments used by many internet users.
2000 - ILOVEYOU, a VBScript worm, infects millions of Windows machines within hours of being released into the wild.
2000 - A 15-year-old Canadian boy crashes Yahoo.com via a DDoS attack. Yahoo was the number one search engine at the time.
2001 - Worms like Nimda are released, building off vulnerabilities and backdoor entrances created by earlier worms.
2004 - Santy, the first "webworm", spreads through phpBB and uses Google to find new targets.
2007 - Estonia is hit by a deliberate DDoS attack, crashing the prime minister's site as well as several government-run organizations such as schools and banks.
2008 - Conficker, one of the most widespread and notorious pieces of malware ever created, infects approximately 10 million Microsoft server systems, including government and military machines. The media attention garnered by Conficker helps further raise the idea of network security in the public consciousness.
2008 - 2009 - The number of "Scareware" programs - a program that looks like an anti-malware program but is in actuality a form of malware itself - rises rapidly. These programs continue to plague internet users with offers to scan their machines or remove supposedly serious viruses, while spreading their own malware when downloaded.
2010 - Stuxnet appears, and is alleged to have targeted Iranian nuclear facilities. It is widely viewed as the most advanced form of malware ever created.
2012 – Zappos, a popular online ecommerce site specializing in shoes is hacked. During the security breach, the site's 24 million customers names, email addresses, partial credit card numbers and other information was exposed.

From <https://www.radware.com/resources/malware_timeline.aspx> 







SANS RESOURCE  ==>

Must Watch
	• SANS@MIC Talks/Webcasts
		○ Self-Compiling Malware
		○ Learning From The Adversary: Automated Malware Analysis For The Win!
		○ The State of Malware Analysis: Advice from the Trenches
		○ iOS Malware - Where to begin Smartphone Forensics Investigations: iOS Malware - Where to begin
	• OALabs YouTube Channel
		○ Open Analysis Live!
		○ Quick Tips
		○ REvil (Sodinokibi) Reverse Engineering
	• SANS Summit Talks
		○ Modern Malware Demands Modern Defense
		○ Uncovering and Visualizing Malicious Infrastructure
		○ FLOSS Every Day: Automatically Extracting Obfuscated Strings from Malware

Must Download
	• Lenny Zeltser's REMnux Linux Distro
	• FLARE VM: A script to install free malware analysis tools into Windows

Must Bookmark
	• List of malware analysis resources
	• REMnux Facebook page

Must Read
	• Lenny Zeltser's blog
	• SANS Blogs on Malware

Must Have Cheat Sheets
	• Reverse-Engineering Malicious Code
	• REMnux Usage Tips for Malware Analysis on Linux
	• Analyzing Malicious Documents
	• Malware Analysis and Reverse-Engineering

Must Subscribe
	• OUCH! - Stop That Malware
	• OUCH! - Ransomware

Sans course to take = FOR610

From <https://www.sans.org/blog/-must-have-free-resources-for-malware-analysis/> 


MORE RESOURCES FROM SANS ==>

Malware analysis sits at the intersection of incident response, forensics, system and network administration, security monitoring, and software engineering. You can get into this field by building upon your existing skills in any of these disciplines. As someone who’s helped thousands of security professionals learn how to analyze malware at SANS Institute, I have a few tips for how you can get started.
Understand Where You Currently Fit Into the Malware Analysis Process
There are several ways to describe the skills you to analyze malicious software. I like grouping them in 4 categories, which I detailed in the post Mastering 4 Stages of Malware Analysis. I’m outlining them below, so you can begin thinking about your current capabilities in these areas:

The analysis steps flow from the bottom of the pyramid (easiest) to the top (most challenging), though people vary the order depending on their skills and other factors, and often revisit some of the steps as they uncover new details about the specimen:
	1. Fully-Automated Analysis: Run (“detonate”) the suspicious file in an automated analysis environment (“sandbox”) to get a report on its activities, such as its interaction with the file system and network.
	2. Static Properties Analysis: Examine metadata and other details embedded in the file (e.g., strings) without running it, so you can spot the areas you might want to examine more deeply in subsequent steps.
	3. Interactive Behavior Analysis: Run the file in an isolated laboratory environment, which you fully control, tweaking the lab’s configuration in a series of iterative experiments to study the specimen’s behavior.
	4. Manual Code Reversing: Examine the code that comprises the file, often with the help of a disassembler and a debugger, to understand its key capabilities and fill in the gaps left from the earlier analysis steps.
Memory, file system, and network forensics efforts (when applicable) also contribute to the understanding.
Ask yourself, “What skills do I have today, and where do they fit into the malware analysis process?” Start experimenting with the area where you feel most comfortable, and progress from there. The following resources can help you move forward.
Review and Learn From Others’ Analysis and Findings
If you’re just getting into malware analysis, you can start by examining the reports published by the more experienced analysts and automated sandboxes. As you review these details, note which aspects of the analysis make sense to you, and which areas require further study. This is one way for you to generate a learning plan.
If you’re wondering where to find malware analysis reports, here’s one starting point: Look at the sources of the posts I make on the LearnREM page I maintain on Facebook. There, you’ll see website and blogs that I like to read to keep up with the industry. (You can view it even without signing into Facebook.)
When reading these reports, you’ll come across some malware sample that you’d like to examine more deeply. Make a note of the hash and other attributes of that file, then look for that file’s report in public malware analysis sandboxes.
You can access several malware analysis sandboxes for free. Search them for the malware you wish to explore; chances are good that they’ve already analyzed that file. Examine the reports, paying attention to the flagged behaviors that indicate that the file might be malicious. Look for Indicators of Compromise (IOCs) that would help you spot that malware in the wild.
Start Experimenting With Malware in Your Lab
Set up a lab that allows you to experiment with malware in an isolated, controlled environment. I shared my recommendations for doing this in the blog post 5 Steps to Building a Malware Analysis Toolkit Using Free Tools. You can use virtualization software to set up Windows and Linux systems to facilitate your analysis.
Next, consider watching my Practical Malware Analysis Essentials talk, which will offer practical tips for analyzing Windows malware in your lab:
Practical Malware Analysis Essentials for Incident Responders


In addition to watching this video, consider reviewing the corresponding slides. Use these materials to repeat in your own lab the analysis I demonstrated. If you’d like a copy of the malware sample I used in this talk, reach out to me. (Be sure to exercise caution when experimenting with real-world malware like this.)
In addition to the Windows-based approach to examining malware, which the video above demonstrates, consider bringing Linux into your environment. The REMnux toolkit is designed for this very purpose, and is available as a virtual machine and a Docker container. You can see REMnux in action in my video What’s New in REMnux v7:
What’s New in REMnux v7


If you already know how REMnux works, you can jump to the 25-minute mark to see some of its tools in action. Reach out if you want a copy of the malware sample I used in that demo, so you can recreate the steps.
REMnux includes a variety of malware analysis tools. You can learn about the types of activities you may need to perform by reviewing the categorized listing of the tools on REMnux. For example, you’ll find a variety of tools for static properties analysis, including FLOSS, which helps identify risky API calls in Windows malware, as documented in a Malware Triage post by Xavier Mertens.
Dive Deeper Into Code-Level Analysis
Examining malicious software at the code level is often the most challenging and time-consuming part of the process, especially when you’re disassembling compiled programs. If you try to learn assembly on its own, it might feel too dry and discouraging. For this reason, I recommend getting to know assembly in the context of a debugger.
The following Introduction to Malware Analysis video might feel a bit dated, but is worth your attention. It offers another set of steps (and a malware sample) you can recreate in your lab. Moreover, it provides a glimpse at how you can analyze code dynamically by running the specimen in a debugger. In this demo, I used the now-outdated debugger OllyDbg, but this approach applies to the modern x64dbg alternative:
Introduction to Malware Analysis


As this video shows, you can start dynamic code analysis of a Windows executable by setting breakpoints on risky API calls inside a debugger. This can bring you to the code worth examining, at which point you can begin figuring out the logic of the malicious assembly instructions. I listed some API calls worth considering in the Reverse-Engineering Malicious Code cheat sheet. The tool FLOSS, mentioned earlier, can help also help with spotting them.
Some malware you’ll encounter will be designed to evade detection and analysis. You can learn about such techniques, and how to examine them, my video Evasion Tactics in Malware from the Inside Out and review the corresponding slides. One of the tools I use in this demo is x64dbg, so the video will also help you get started with this powerful debugger:
Evasion Tactics in Malware from the Inside Out: Minerva Labs - Paul's Security Weekly #585



To deepen your understanding of code-level analysis, start experimenting with reviewing malicious code statically, without running it in a debugger. You can do this using Ghidra, which includes a disassembler and decompiler. For an introduction to this powerful tool, see the Code Analysis With Ghidra video by Anuj Soni, and review his accompanying blog post:
Ghidra Code Analysis with Anuj Soni


Learn to Examine Malicious Scripts and Document Files
In addition to being able to analyze compiled binaries, you should learn how to examine malicious scripts and documents. Such forms of malware are often used to deliver other malicious payloads and can directly implement the attacker’s logic.
For an overview of the steps you can take to examine malicious scripts, such as JavaScript, watch Evan Dygert’s presentation Shortcuts for Understanding Malicious Scripts and review the accompanying slides and malware samples:
Shortcuts for Understanding Malicious Scripts


For insights into examining malicious PowerShell artifacts, watch Mari DeGrazia’s talk Finding and Decoding Malicious Powershell Scripts:
Finding and Decoding Malicious Powershell Scripts - SANS DFIR Summit 2018


To learn about analyzing malicious Microsoft Office documents, you can start with this in-depth video by Didier Stevens, titled Analyzing Malicious Office Documents:
Analyzing Malicious Office Documents   Presented By  Didier Stevens Workshop


You can learn more about analyzing malicious documents and practice in your own lab by following Ryan Chapman‘s workshop Understanding and Analyzing Carrier Files.
You’ll also find my Analyzing Malicious Documents cheat sheet useful.
Continue Reading, Experimenting, and Learning
Reading and watching the resources mentioned above will help you learn about malware analysis approaches, but you’ll need to find time for focused, deliberate practice to learn how to apply them. That’s why the tips I mentioned offer pointers to several ways in which you can start practicing.
Once you’re ready to go deeper into the field, consider taking the Reverse-Engineering Malware course, which I’ve co-authored and teach along with other experienced security practitioners.
There’s a plethora of articles, blog posts, and videos that can help you get into malware analysis, beyond what I’ve shared with you. You’ll find them with a few online searches, but here are a few additional pointers:
	• Cheat Sheet for Analyzing Malicious Software: A reference, written by me, which summarizes the analysis approach outlined above and offers additional tips.
	• Shellcode Analysis 101: A presentation by Jim Clausing on examining shellcode, which can be a part of attacks and malicious files.
	• The State of Malware Analysis: Advice from the Trenches: A conversation among Jim Clausing, Evan Dygert, Anuj Soni, Jake Williams, and yours truly.
	• Free Malware Sample Sources for Researchers: A set of sites that can provide free access to malware for your practice.


From <https://www.sans.org/blog/how-you-can-start-learning-malware-analysis/> 



Collection of malware analysis resources
This collection is specifically intended for people who would like to get into malware analysis. It attempts to include material that is easy to understand, even without an in-depth pre-existing knowledge in computer science or related topics. I don't claim for it to be complete or that these are the best resources out there and if I missed your resource, please don't assume I deem it unworthy of inclusion. Instead, just let me know, and I will add it or send a pull request. :)
Which programming languages should I learn?
That depends a little bit on what kind of malware you aim to analyse. Personally, I see the following three programming languages as a good base:
	• Python: While malware written in Python is rare it has large applications in malware analysis and malware research due to a lot of tools being scriptable using Python. Besides, it offers a vast amount of libraries aimed explicitly at reverse engineering.
	• C: C may be a bit controversial from the software development point of view, but the reality is that large portions of all major operating systems these days are still based on C. Therefore, a lot of API documentation is very C-centric. You will have a way easier time reading documentation and manuals if you know C. It is also the basis of inspiration for a lot of other programming languages. So knowing C will make learning other programming languages like C++, C#, JavaScript, Java, and so on a lot easier.
	• Assembly: That's ultimately the language that the processor in your computer works with. If you genuinely want to know what precisely some code does, you will often have to go down to the lowest possible level. While assembly may look strange at first and the multitude of instruction sets consisting of literally hundreds of instructions seem intimidating, you will ultimately only come across a small portion (two to three dozens) of possible instructions that are easy to grasp and that everyone can get a handle of quickly. For the rest, it is sufficient to know how to read the documentation properly to look them up in the off-chance you ever come across it.
I know a lot of malware analysts, who don't know any of these programming languages who still do very well in their field. So don't see any of them as a hard requirement. However, learning at least the basics of each of them will prove tremendously helpful not only for malware analysis but your future career in general.
Open-sourced university courses
	• Malware Analysis - CSCI 4976 was developed by a group of members of the student computer security club at Rensselaer Polytechnic Institute. It is very much based on the Practical Malware Analysis book, that I also recommend in the book section, following a very similar structure. However, it adds to the material and introduces additional labs and exercises including solutions.
Video tutorials and guides
	• Malware Analysis for Hedgehogs has a lot of different videos covering various malware research topics. While not precisely guides, most of the videos are well explained and easy to follow.
	• Open Analysis Live! provides walkthroughs and guide videos for a lot of different topics related to malware research: From setting up a secure environment for you analyse malware in, over how to use some of the tools of the trade, to walkthroughs of dealing with specific malware samples.
	• Open Security Training probably provides the most comprehensive collection of video tutorials out there. The content taught in these videos is somewhat advanced, and if you have absolutely no experience with programming, you will probably struggle. However, the course material, as well as the content of the videos, is outstanding and they cover almost every single topic you may come across if you want to become a malware researcher. If you are unsure which course to start with I would recommend Introductory Intel x86: Architecture, Assembly, Applications, & Alliteration and then follow the "Malware Analysis" skill tree at the bottom.
Written online guides
	• MalwareUnicorn's Reverse Engineering 101 is a great starter that covers the basics and aims to get you started quickly. The tutorials are easy to follow and cover most bases. I highly recommend going through it even if you don't like written guides, as it teaches you a lot of fundamentals in a very concise manner. Let's hope she releases Reverse Engineering 102 soon. :)
	• Reverse Engineering for Beginners is so exhaustive, that I considered putting it into the book section. But since it is available as a PDF only, I guess it fits in better here. The one small drawback is that Dennis asks for your email address to download the PDF. But if you don't mind sharing your email address in return for one of the best and most comprehensive tutorials for reverse engineering out there, it's an excellent pick. Plus, you can always get a throwaway address.
Books
	• Practical Malware Analysis is a very hands-on guide on how to dissect malware and figure out what exactly it is doing. It's one of those books that a lot of malware analysts and researcher would consider "a classic" and recommend without reservations. Rightfully so I may add. :)
	• Malware Analyst's Cookbook and DVD: Tools and Techniques for Fighting Malicious Code is the other standard recommendation people give. Like Practical Malware Analysis, it is full of exercises and practical examples and well worth the money.
	• Practical Reverse Engineering: x86, x64, ARM, Windows Kernel, Reversing Tools, and Obfuscation is a more advanced book that requires a lot of studies. If you are new to this, I wouldn't wholeheartedly recommend it. But if you read one of the other books before or used some of the other material mentioned on this site and you want to go even deeper into the various concepts, it's an outstanding pick.
	• The Art of Computer Virus Research and Defense is one of the very few books that looks specifically into how anti-viruses work. While it is a bit older and slightly outdated, the techniques explained in that book are still in use today. So if you are specifically interested in becoming an anti-virus software engineer, it's a great start.

From <https://github.com/fwosar/malware-analysis-resources#readme> 

Best Practices

• Guide to Malware Incident Prevention and Handling for Desktop and Laptops (NIST)
• Reducing Risks associated with Destructive Malware (FS-ISAC)
• Lenny Zeltser - 5 Steps to Building a Malware Analysis Toolkit using Free Tools
• Patterns of a Cooperative Malware Analysis Workflow
By Daniel Plohmann, Sebastian Eschweiler, Elmar Gerhards-Padilla

Analysis and detection techniques

• David Bianco - Hunting for Malware Critical Process Impersonation
• AMA: Static Code Analysis of Web Page for the Detection of Malicious Scripts
• Random Forest for Malware Classification
• Wavelet decomposition of software entropy reveals symptoms of malicious code

Trainings and exercises

• VOpenSecurityTraining
• Reverse Engineering for Beginners
• ENISA Common framework for analysis
• Building artefact handling and analysis environment
• Processing and storing artefacts
• Artefact analysis fundamentals
• Advanced artefact handling
• Introduction to advanced artefact analysis
• Dynamic analysis of artefacts
• Static analysis of artefacts

Tools

• Cuckoo Sandbox is a popular open-source sandbox to automate dynamic analysis.
• Limon is a sandbox for analyzing Linux malware.
• IDA Pro: an Interactive Disassembler and Debugger to support static analysis.
• A set of malware analysis tools:
• procdot visualizes procmon and PCAP logfiles in a single graph
• Minibis is a behavioral analysis automation framework
• Densityscout aims to identify packed executables based on Bytehist
• Viper is a binary analysis and management framework, which can help organize samples of malware.
• Radare is a disassembly framework supporting many different architectures.
• The Microsoft SysInternals Suite helps assess the state and changes of a Windows system.
• The BFK passive DNS Logger allows execution of passive DNS queries on malicious domains.
• VirusTotal is a massive repository of malware, which allows investigations into samples, domains, detection rates and -names, etc. VirusTotal Intelligence is a commercial product which provides deeper levels of access to this information.
• Deepviz - Powerful online sandbox.
• Reverse.it - Powerful online sandbox based on VxStream. The free version has already a good level of customization, and it includes basic android static analysis.
• Aleph: an Open-Source Malware Analysis System.

From <https://www.first.org/global/sigs/malware/resources/> 

1. PeStudio
>

My first port of call for analyzing a Windows executable is always PeStudio. This is an excellent tool for conducting an initial triage of a malware sample and allows me to quickly pull out any suspicious artifacts.
Once a binary has been loaded it will quickly provide the user with hashes of the malware and any detections found in VirusTotal. A list of strings is also pulled however if the sample is packed this may not return any strong IOCs, unpacking the sample, and then reviewing the strings will often provide useful information such as malicious domains and IP addresses.
The screenshot above also shows the ‘entropy’ of the malware. This helps identify whether the malware is packed or not. When a sample is packed this means the malware author has effectively put a layer of code around the malware in order to obfuscate its true functionality and prevent analysis of the malware.
To assist with identifying packed malware PeStudio displays the level of entropy of the file. Entropy is measured on a scale of 0-8, with 8 being the highest level of entropy. The higher the entropy the more likely that a piece of malware is packed.
Another useful section is the ‘Imports’ tab, this contains functionality that is imported into the malware so it can perform certain tasks. For example, Windows contains various libraries called DLLs, this stands for dynamic link library. Each library contains a unique set of functions known as Windows APIs, these are used by legitimate programs to perform various functions. For example, the DLL Kerner32.dll contains the API CreateProcessW, this can be used by a piece of software to create a new running process. However, malware will use the same methodology to import its own functionality. If the malware needs to create a new file on disk, the malware author doesn’t need to write a piece of code to do that they can just import the API CreateFileW into the malware. By looking at the imports a malware analyst may be able to predict the potential behavior of the malware.
2. Process Hacker

Process Hacker allows a malware analyst to see what processes are running on a device. This can be useful when detonating a piece of malware to see what new processes are created by the malware and where these are being run from on disk. Malware will often try to hide by copying itself to a new location and then renaming itself, Process Hacker will display this activity occurring making it easy to identify how the malware is attempting to hide.
This tool is also useful for pulling information from the memory of a process. This means that if a piece of malware is detonated then Process Hacker can be used to inspect the memory for strings, the strings found in memory will often return useful information such as IP addresses, domains, and user agents that are being used by the malware.
3. Process Monitor (ProcMon)

ProcMon is a powerful tool from Microsoft which records live filesystem activity such as process creations and registry changes. This is really handy when used in tandem with Process Hacker as a new process may be created and then quickly killed, this process can then be reviewed in the ProcMon capture. Using the prebuilt filters or process tree an analyst can quickly identify what processes were created, where the executable was run from, and the parent/child dependencies.
ProcMon can be particularly useful when analyzing malicious documents. The threat actors behind Emotet often use malicious Word documents as an attack vector. The Word document will contain macros which when enabled will call out to the attackers C2 infrastructure and download the Emotet payload. None of this activity is visible to the user of the compromised device. By using ProcMon you are able to capture the Word Document being opened, view the hidden PowerShell process being launched and the base64 encoded command being run.
One issue with ProcMon is that in a matter of seconds it can quickly record over 100,000 events. Although the filters in ProcMon are excellent there is always a risk an event of interest could be missed, however, this data can be exported as a CSV and imported into the next tool in my list.
4. ProcDot

ProcDot allows a malware analyst to ingest the output from ProcMon and automatically generate a graphical representation of the captured data. Simply upload the csv into ProcDot and select the process name of the malware. Rather than creating filters and navigating hundreds of thousands of events you are now able to navigate a visual diagram of what recorded malware activity.
ProcMon data can also be enriched by ingesting a pcap from a tool such as Wireshark into ProcDot.
5. Autoruns

Autoruns is another Microsoft tool that will display any installed software on a device that is set to launch when a machine is powered on. Malware can hide but ultimately it has to run and in order to survive a reboot a piece of malware must create a persistence mechanism.
There are a few techniques that can be employed to achieve this objective such as creating a scheduled task or creating specific run keys within the registry. After running a piece of malware in a VM running Autoruns will detect and highlight any new persistent software and the technique it has implemented making it ideal for malware analysis.
6. Fiddler

Malware will often use HTTP/HTTPS to contact its C2 servers and download additional malware or exfiltrate data. Using a tool such as Fiddler which acts as a web proxy allows this traffic to be captured and analyzed. This can prove useful when analysing a malicious document which incorporates macros to download a malicious payload, running fiddler allows a malware analyst to identify the domains that are hardcoded into the document and will be used to download the hosted malware.
In the example above, you can see how Fiddler was able to record a malicious Word document attempting to download Emotet from multiple websites hosting the malware, if the first attempt is unsuccessful it then moves on to the next hardcoded domain.
7. Wireshark

Wireshark is the de facto tool for capturing and analysing network traffic. Whereas a web proxy such as Fiddler is focused on HTTP/HTTPS traffic, Wireshark allows deep packet inspection of multiple protocols at multiple layers. While analysing packet captures in Wireshark it is even possible to extract files from the pcap that have been downloaded by the malware.
8. x64dbg

The tools we have discussed so far can all be used by beginners making their first foray into the world of malware analysis. x64dbg is where the learning curve for malware analysis takes a steep incline.
This tool is for manually debugging and reverse engineering malware samples,  you need to have an understanding of assembly code to use this tool however once that learning curve has plateaued it allows a malware analyst to manually unpack and take apart malware samples like a surgeon with a scalpel.
Understanding how to use x64dbg means you can focus on specific functions and imported API calls of a sample and begin to dissect how the malware truly operates.
9. Ghidra

Ghidra was developed by the National Security Agency (NSA) and is what’s known as a disassembler rather than a debugger. Using Ghidra you are able to navigate the assembly code functions like in x64dbg, however, the key difference is that the code is not executed, it is disassembled so that it can be statically analyzed.
Another key difference from x64dbg is that Ghidra will attempt to decompile the code into a human-readable output that is close to what the malware author will have written when creating the malware. This can often make it easier for a malware analyst to reverse engineer the malware as they are presented with the variables and instructions which make up each function.
10. Radare2/Cutter

Radare2 is a command-line debugger that can be used on Windows and Linux, what I really like about Radare2 is that unlike x64dbg it has the capability to analyze Linux executables. To make Radare2 more user-friendly for those who may be put off by the command line interface. It also has a GUI front end known as Cutter.
11. Cuckoo Sandbox

A Cuckoo Sandbox is a tool for automating malware analysis. The Cuckoo Sandboxes I have built in the past have all been built on a Ubuntu host that runs the main Cuckoo application. Within the host is a Windows 7 VM which is nested within Virtualbox. The VM has a Cuckoo agent installed which allows it to feed data back to the Ubuntu host running Cuckoo. The malware is submitted to the VM and the Cuckoo agent records the activity of the malware, once the analysis is complete a detailed report of the malware is generated.
A Cuckoo Sandbox is a great tool to have within an organization when you have an incident that involves malware, I will often run the malware through Cuckoo while I am performing my own analysis as this allows me to gather as much information as possible from a malware sample.
Personally, I find malware analysis fascinating and always see it as a personal challenge to pull out as much information as I can. It’s not always easy, but the tools outlined in this article should hopefully provide you with an understanding of what is involved in analyzing malware and some of the tools that are available to start building out your own malware analysis lab.
If you are interested in learning more about malware analysis then be sure to read the following articles from Varonis which cover the techniques employed by fileless malware and also some great content that will teach you some malware coding on how to write a keylogger.

From <https://www.varonis.com/blog/malware-analysis-tools/> 

Awesome Malware Analysis 
A curated list of awesome malware analysis tools and resources. Inspired by awesome-python and awesome-php.

	• Malware Collection
		○ Anonymizers
		○ Honeypots
		○ Malware Corpora
	• Open Source Threat Intelligence
		○ Tools
		○ Other Resources
	• Detection and Classification
	• Online Scanners and Sandboxes
	• Domain Analysis
	• Browser Malware
	• Documents and Shellcode
	• File Carving
	• Deobfuscation
	• Debugging and Reverse Engineering
	• Network
	• Memory Forensics
	• Windows Artifacts
	• Storage and Workflow
	• Miscellaneous
	• Resources
		○ Books
		○ Other
	• Related Awesome Lists
	• Contributing
	• Thanks
View Chinese translation: 恶意软件分析大合集.md.
Malware Collection
Anonymizers
Web traffic anonymizers for analysts.
	• Anonymouse.org - A free, web based anonymizer.
	• OpenVPN - VPN software and hosting solutions.
	• Privoxy - An open source proxy server with some privacy features.
	• Tor - The Onion Router, for browsing the web without leaving traces of the client IP.
Honeypots
Trap and collect your own samples.
	• Conpot - ICS/SCADA honeypot.
	• Cowrie - SSH honeypot, based on Kippo.
	• DemoHunter - Low interaction Distributed Honeypots.
	• Dionaea - Honeypot designed to trap malware.
	• Glastopf - Web application honeypot.
	• Honeyd - Create a virtual honeynet.
	• HoneyDrive - Honeypot bundle Linux distro.
	• Honeytrap - Opensource system for running, monitoring and managing honeypots.
	• MHN - MHN is a centralized server for management and data collection of honeypots. MHN allows you to deploy sensors quickly and to collect data immediately, viewable from a neat web interface.
	• Mnemosyne - A normalizer for honeypot data; supports Dionaea.
	• Thug - Low interaction honeyclient, for investigating malicious websites.
Malware Corpora
Malware samples collected for analysis.
	• Clean MX - Realtime database of malware and malicious domains.
	• Contagio - A collection of recent malware samples and analyses.
	• Exploit Database - Exploit and shellcode samples.
	• Infosec - CERT-PA - Malware samples collection and analysis.
	• InQuest Labs - Evergrowing searchable corpus of malicious Microsoft documents.
	• Javascript Mallware Collection - Collection of almost 40.000 javascript malware samples
	• Malpedia - A resource providing rapid identification and actionable context for malware investigations.
	• Malshare - Large repository of malware actively scrapped from malicious sites.
	• Open Malware Project - Sample information and downloads. Formerly Offensive Computing.
	• Ragpicker - Plugin based malware crawler with pre-analysis and reporting functionalities
	• theZoo - Live malware samples for analysts.
	• Tracker h3x - Agregator for malware corpus tracker and malicious download sites.
	• vduddu malware repo - Collection of various malware files and source code.
	• VirusBay - Community-Based malware repository and social network.
	• ViruSign - Malware database that detected by many anti malware programs except ClamAV.
	• VirusShare - Malware repository, registration required.
	• VX Vault - Active collection of malware samples.
	• Zeltser's Sources - A list of malware sample sources put together by Lenny Zeltser.
	• Zeus Source Code - Source for the Zeus trojan leaked in 2011.
	• VX Underground - Massive and growing collection of free malware samples.
Open Source Threat Intelligence
Tools
Harvest and analyze IOCs.
	• AbuseHelper - An open-source framework for receiving and redistributing abuse feeds and threat intel.
	• AlienVault Open Threat Exchange - Share and collaborate in developing Threat Intelligence.
	• Combine - Tool to gather Threat Intelligence indicators from publicly available sources.
	• Fileintel - Pull intelligence per file hash.
	• Hostintel - Pull intelligence per host.
	• IntelMQ - A tool for CERTs for processing incident data using a message queue.
	• IOC Editor - A free editor for XML IOC files.
	• iocextract - Advanced Indicator of Compromise (IOC) extractor, Python library and command-line tool.
	• ioc_writer - Python library for working with OpenIOC objects, from Mandiant.
	• MalPipe - Malware/IOC ingestion and processing engine, that enriches collected data.
	• Massive Octo Spice - Previously known as CIF (Collective Intelligence Framework). Aggregates IOCs from various lists. Curated by the CSIRT Gadgets Foundation.
	• MISP - Malware Information Sharing Platform curated by The MISP Project.
	• Pulsedive - Free, community-driven threat intelligence platform collecting IOCs from open-source feeds.
	• PyIOCe - A Python OpenIOC editor.
	• RiskIQ - Research, connect, tag and share IPs and domains. (Was PassiveTotal.)
	• threataggregator - Aggregates security threats from a number of sources, including some of those listed below in other resources.
	• ThreatConnect - TC Open allows you to see and share open source threat data, with support and validation from our free community.
	• ThreatCrowd - A search engine for threats, with graphical visualization.
	• ThreatIngestor - Build automated threat intel pipelines sourcing from Twitter, RSS, GitHub, and more.
	• ThreatTracker - A Python script to monitor and generate alerts based on IOCs indexed by a set of Google Custom Search Engines.
	• TIQ-test - Data visualization and statistical analysis of Threat Intelligence feeds.
Other Resources
Threat intelligence and IOC resources.
	• Autoshun (list) - Snort plugin and blocklist.
	• Bambenek Consulting Feeds - OSINT feeds based on malicious DGA algorithms.
	• Fidelis Barncat - Extensive malware config database (must request access).
	• CI Army (list) - Network security blocklists.
	• Critical Stack- Free Intel Market - Free intel aggregator with deduplication featuring 90+ feeds and over 1.2M indicators.
	• Cybercrime tracker - Multiple botnet active tracker.
	• FireEye IOCs - Indicators of Compromise shared publicly by FireEye.
	• FireHOL IP Lists - Analytics for 350+ IP lists with a focus on attacks, malware and abuse. Evolution, Changes History, Country Maps, Age of IPs listed, Retention Policy, Overlaps.
	• HoneyDB - Community driven honeypot sensor data collection and aggregation.
	• hpfeeds - Honeypot feed protocol.
	• Infosec - CERT-PA lists (IPs - Domains - URLs) - Blocklist service.
	• InQuest REPdb - Continuous aggregation of IOCs from a variety of open reputation sources.
	• InQuest IOCdb - Continuous aggregation of IOCs from a variety of blogs, Github repos, and Twitter.
	• Internet Storm Center (DShield) - Diary and searchable incident database, with a web API. (unofficial Python library).
	• malc0de - Searchable incident database.
	• Malware Domain List - Search and share malicious URLs.
	• MetaDefender Threat Intelligence Feed - List of the most looked up file hashes from MetaDefender Cloud.
	• OpenIOC - Framework for sharing threat intelligence.
	• Proofpoint Threat Intelligence - Rulesets and more. (Formerly Emerging Threats.)
	• Ransomware overview - A list of ransomware overview with details, detection and prevention.
	• STIX - Structured Threat Information eXpression - Standardized language to represent and share cyber threat information. Related efforts from MITRE:
		○ CAPEC - Common Attack Pattern Enumeration and Classification
		○ CybOX - Cyber Observables eXpression
		○ MAEC - Malware Attribute Enumeration and Characterization
		○ TAXII - Trusted Automated eXchange of Indicator Information
	• SystemLookup - SystemLookup hosts a collection of lists that provide information on the components of legitimate and potentially unwanted programs.
	• ThreatMiner - Data mining portal for threat intelligence, with search.
	• threatRECON - Search for indicators, up to 1000 free per month.
	• ThreatShare - C2 panel tracker
	• Yara rules - Yara rules repository.
	• YETI - Yeti is a platform meant to organize observables, indicators of compromise, TTPs, and knowledge on threats in a single, unified repository.
	• ZeuS Tracker - ZeuS blocklists.
Detection and Classification
Antivirus and other malware identification tools
	• AnalyzePE - Wrapper for a variety of tools for reporting on Windows PE files.
	• Assemblyline - A scalable distributed file analysis framework.
	• BinaryAlert - An open source, serverless AWS pipeline that scans and alerts on uploaded files based on a set of YARA rules.
	• capa - Detects capabilities in executable files.
	• chkrootkit - Local Linux rootkit detection.
	• ClamAV - Open source antivirus engine.
	• Detect It Easy(DiE) - A program for determining types of files.
	• Exeinfo PE - Packer, compressor detector, unpack info, internal exe tools.
	• ExifTool - Read, write and edit file metadata.
	• File Scanning Framework - Modular, recursive file scanning solution.
	• fn2yara - FN2Yara is a tool to generate Yara signatures for matching functions (code) in an executable program.
	• Generic File Parser - A Single Library Parser to extract meta information,static analysis and detect macros within the files.
	• hashdeep - Compute digest hashes with a variety of algorithms.
	• HashCheck - Windows shell extension to compute hashes with a variety of algorithms.
	• Loki - Host based scanner for IOCs.
	• Malfunction - Catalog and compare malware at a function level.
	• Manalyze - Static analyzer for PE executables.
	• MASTIFF - Static analysis framework.
	• MultiScanner - Modular file scanning/analysis framework
	• Nauz File Detector(NFD) - Linker/Compiler/Tool detector for Windows, Linux and MacOS.
	• nsrllookup - A tool for looking up hashes in NIST's National Software Reference Library database.
	• packerid - A cross-platform Python alternative to PEiD.
	• PE-bear - Reversing tool for PE files.
	• PEframe - PEframe is an open source tool to perform static analysis on Portable Executable malware and malicious MS Office documents.
	• PEV - A multiplatform toolkit to work with PE files, providing feature-rich tools for proper analysis of suspicious binaries.
	• PortEx - Java library to analyse PE files with a special focus on malware analysis and PE malformation robustness.
	• Quark-Engine - An Obfuscation-Neglect Android Malware Scoring System
	• Rootkit Hunter - Detect Linux rootkits.
	• ssdeep - Compute fuzzy hashes.
	• totalhash.py - Python script for easy searching of the TotalHash.cymru.com database.
	• TrID - File identifier.
	• YARA - Pattern matching tool for analysts.
	• Yara rules generator - Generate yara rules based on a set of malware samples. Also contains a good strings DB to avoid false positives.
	• Yara Finder - A simple tool to yara match the file against various yara rules to find the indicators of suspicion.
Online Scanners and Sandboxes
Web-based multi-AV scanners, and malware sandboxes for automated analysis.
	• anlyz.io - Online sandbox.
	• any.run - Online interactive sandbox.
	• AndroTotal - Free online analysis of APKs against multiple mobile antivirus apps.
	• AVCaesar - Malware.lu online scanner and malware repository.
	• BoomBox - Automatic deployment of Cuckoo Sandbox malware lab using Packer and Vagrant.
	• Cryptam - Analyze suspicious office documents.
	• Cuckoo Sandbox - Open source, self hosted sandbox and automated analysis system.
	• cuckoo-modified - Modified version of Cuckoo Sandbox released under the GPL. Not merged upstream due to legal concerns by the author.
	• cuckoo-modified-api - A Python API used to control a cuckoo-modified sandbox.
	• DeepViz - Multi-format file analyzer with machine-learning classification.
	• detux - A sandbox developed to do traffic analysis of Linux malwares and capturing IOCs.
	• DRAKVUF - Dynamic malware analysis system.
	• firmware.re - Unpacks, scans and analyzes almost any firmware package.
	• HaboMalHunter - An Automated Malware Analysis Tool for Linux ELF Files.
	• Hybrid Analysis - Online malware analysis tool, powered by VxSandbox.
	• Intezer - Detect, analyze, and categorize malware by identifying code reuse and code similarities.
	• IRMA - An asynchronous and customizable analysis platform for suspicious files.
	• Joe Sandbox - Deep malware analysis with Joe Sandbox.
	• Jotti - Free online multi-AV scanner.
	• Limon - Sandbox for Analyzing Linux Malware.
	• Malheur - Automatic sandboxed analysis of malware behavior.
	• malice.io - Massively scalable malware analysis framework.
	• malsub - A Python RESTful API framework for online malware and URL analysis services.
	• Malware config - Extract, decode and display online the configuration settings from common malwares.
	• MalwareAnalyser.io - Online malware anomaly-based static analyser with heuristic detection engine powered by data mining and machine learning.
	• Malwr - Free analysis with an online Cuckoo Sandbox instance.
	• MetaDefender Cloud - Scan a file, hash, IP, URL or domain address for malware for free.
	• NetworkTotal - A service that analyzes pcap files and facilitates the quick detection of viruses, worms, trojans, and all kinds of malware using Suricata configured with EmergingThreats Pro.
	• Noriben - Uses Sysinternals Procmon to collect information about malware in a sandboxed environment.
	• PacketTotal - PacketTotal is an online engine for analyzing .pcap files, and visualizing the network traffic within.
	• PDF Examiner - Analyse suspicious PDF files.
	• ProcDot - A graphical malware analysis tool kit.
	• Recomposer - A helper script for safely uploading binaries to sandbox sites.
	• sandboxapi - Python library for building integrations with several open source and commercial malware sandboxes.
	• SEE - Sandboxed Execution Environment (SEE) is a framework for building test automation in secured Environments.
	• SEKOIA Dropper Analysis - Online dropper analysis (Js, VBScript, Microsoft Office, PDF).
	• VirusTotal - Free online analysis of malware samples and URLs
	• Visualize_Logs - Open source visualization library and command line tools for logs. (Cuckoo, Procmon, more to come...)
	• Zeltser's List - Free automated sandboxes and services, compiled by Lenny Zeltser.
Domain Analysis
Inspect domains and IP addresses.
	• AbuseIPDB - AbuseIPDB is a project dedicated to helping combat the spread of hackers, spammers, and abusive activity on the internet.
	• badips.com - Community based IP blacklist service.
	• boomerang - A tool designed for consistent and safe capture of off network web resources.
	• Cymon - Threat intelligence tracker, with IP/domain/hash search.
	• Desenmascara.me - One click tool to retrieve as much metadata as possible for a website and to assess its good standing.
	• Dig - Free online dig and other network tools.
	• dnstwist - Domain name permutation engine for detecting typo squatting, phishing and corporate espionage.
	• IPinfo - Gather information about an IP or domain by searching online resources.
	• Machinae - OSINT tool for gathering information about URLs, IPs, or hashes. Similar to Automator.
	• mailchecker - Cross-language temporary email detection library.
	• MaltegoVT - Maltego transform for the VirusTotal API. Allows domain/IP research, and searching for file hashes and scan reports.
	• Multi rbl - Multiple DNS blacklist and forward confirmed reverse DNS lookup over more than 300 RBLs.
	• NormShield Services - Free API Services for detecting possible phishing domains, blacklisted ip addresses and breached accounts.
	• PhishStats - Phishing Statistics with search for IP, domain and website title
	• Spyse - subdomains, whois, realted domains, DNS, hosts AS, SSL/TLS info,
	• SecurityTrails - Historical and current WHOIS, historical and current DNS records, similar domains, certificate information and other domain and IP related API and tools.
	• SpamCop - IP based spam block list.
	• SpamHaus - Block list based on domains and IPs.
	• Sucuri SiteCheck - Free Website Malware and Security Scanner.
	• Talos Intelligence - Search for IP, domain or network owner. (Previously SenderBase.)
	• TekDefense Automater - OSINT tool for gathering information about URLs, IPs, or hashes.
	• URLhaus - A project from abuse.ch with the goal of sharing malicious URLs that are being used for malware distribution.
	• URLQuery - Free URL Scanner.
	• urlscan.io - Free URL Scanner & domain information.
	• Whois - DomainTools free online whois search.
	• Zeltser's List - Free online tools for researching malicious websites, compiled by Lenny Zeltser.
	• ZScalar Zulu - Zulu URL Risk Analyzer.
Browser Malware
Analyze malicious URLs. See also the domain analysis and documents and shellcode sections.
	• Bytecode Viewer - Combines multiple Java bytecode viewers and decompilers into one tool, including APK/DEX support.
	• Firebug - Firefox extension for web development.
	• Java Decompiler - Decompile and inspect Java apps.
	• Java IDX Parser - Parses Java IDX cache files.
	• JSDetox - JavaScript malware analysis tool.
	• jsunpack-n - A javascript unpacker that emulates browser functionality.
	• Krakatau - Java decompiler, assembler, and disassembler.
	• Malzilla - Analyze malicious web pages.
	• RABCDAsm - A "Robust ActionScript Bytecode Disassembler."
	• SWF Investigator - Static and dynamic analysis of SWF applications.
	• swftools - Tools for working with Adobe Flash files.
	• xxxswf - A Python script for analyzing Flash files.
Documents and Shellcode
Analyze malicious JS and shellcode from PDFs and Office documents. See also the browser malware section.
	• AnalyzePDF - A tool for analyzing PDFs and attempting to determine whether they are malicious.
	• box-js - A tool for studying JavaScript malware, featuring JScript/WScript support and ActiveX emulation.
	• diStorm - Disassembler for analyzing malicious shellcode.
	• InQuest Deep File Inspection - Upload common malware lures for Deep File Inspection and heuristical analysis.
	• JS Beautifier - JavaScript unpacking and deobfuscation.
	• libemu - Library and tools for x86 shellcode emulation.
	• malpdfobj - Deconstruct malicious PDFs into a JSON representation.
	• OfficeMalScanner - Scan for malicious traces in MS Office documents.
	• olevba - A script for parsing OLE and OpenXML documents and extracting useful information.
	• Origami PDF - A tool for analyzing malicious PDFs, and more.
	• PDF Tools - pdfid, pdf-parser, and more from Didier Stevens.
	• PDF X-Ray Lite - A PDF analysis tool, the backend-free version of PDF X-RAY.
	• peepdf - Python tool for exploring possibly malicious PDFs.
	• QuickSand - QuickSand is a compact C framework to analyze suspected malware documents to identify exploits in streams of different encodings and to locate and extract embedded executables.
	• Spidermonkey - Mozilla's JavaScript engine, for debugging malicious JS.
File Carving
For extracting files from inside disk and memory images.
	• bulk_extractor - Fast file carving tool.
	• EVTXtract - Carve Windows Event Log files from raw binary data.
	• Foremost - File carving tool designed by the US Air Force.
	• hachoir3 - Hachoir is a Python library to view and edit a binary stream field by field.
	• Scalpel - Another data carving tool.
	• SFlock - Nested archive extraction/unpacking (used in Cuckoo Sandbox).
Deobfuscation
Reverse XOR and other code obfuscation methods.
	• Balbuzard - A malware analysis tool for reversing obfuscation (XOR, ROL, etc) and more.
	• de4dot - .NET deobfuscator and unpacker.
	• ex_pe_xor & iheartxor - Two tools from Alexander Hanel for working with single-byte XOR encoded files.
	• FLOSS - The FireEye Labs Obfuscated String Solver uses advanced static analysis techniques to automatically deobfuscate strings from malware binaries.
	• NoMoreXOR - Guess a 256 byte XOR key using frequency analysis.
	• PackerAttacker - A generic hidden code extractor for Windows malware.
	• PyInstaller Extractor - A Python script to extract the contents of a PyInstaller generated Windows executable file. The contents of the pyz file (usually pyc files) present inside the executable are also extracted and automatically fixed so that a Python bytecode decompiler will recognize it.
	• uncompyle6 - A cross-version Python bytecode decompiler. Translates Python bytecode back into equivalent Python source code.
	• un{i}packer - Automatic and platform-independent unpacker for Windows binaries based on emulation.
	• unpacker - Automated malware unpacker for Windows malware based on WinAppDbg.
	• unxor - Guess XOR keys using known-plaintext attacks.
	• VirtualDeobfuscator - Reverse engineering tool for virtualization wrappers.
	• XORBruteForcer - A Python script for brute forcing single-byte XOR keys.
	• XORSearch & XORStrings - A couple programs from Didier Stevens for finding XORed data.
	• xortool - Guess XOR key length, as well as the key itself.
Debugging and Reverse Engineering
Disassemblers, debuggers, and other static and dynamic analysis tools.
	• angr - Platform-agnostic binary analysis framework developed at UCSB's Seclab.
	• bamfdetect - Identifies and extracts information from bots and other malware.
	• BAP - Multiplatform and open source (MIT) binary analysis framework developed at CMU's Cylab.
	• BARF - Multiplatform, open source Binary Analysis and Reverse engineering Framework.
	• binnavi - Binary analysis IDE for reverse engineering based on graph visualization.
	• Binary ninja - A reversing engineering platform that is an alternative to IDA.
	• Binwalk - Firmware analysis tool.
	• BluePill - Framework for executing and debugging evasive malware and protected executables.
	• Capstone - Disassembly framework for binary analysis and reversing, with support for many architectures and bindings in several languages.
	• codebro - Web based code browser using  clang to provide basic code analysis.
	• Cutter - GUI for Radare2.
	• DECAF (Dynamic Executable Code Analysis Framework) - A binary analysis platform based   on QEMU. DroidScope is now an extension to DECAF.
	• dnSpy - .NET assembly editor, decompiler and debugger.
	• dotPeek - Free .NET Decompiler and Assembly Browser.
	• Evan's Debugger (EDB) - A modular debugger with a Qt GUI.
	• Fibratus - Tool for exploration and tracing of the Windows kernel.
	• FPort - Reports open TCP/IP and UDP ports in a live system and maps them to the owning application.
	• GDB - The GNU debugger.
	• GEF - GDB Enhanced Features, for exploiters and reverse engineers.
	• Ghidra - A software reverse engineering (SRE) framework created and maintained by the National Security Agency Research Directorate.
	• hackers-grep - A utility to search for strings in PE executables including imports, exports, and debug symbols.
	• Hopper - The macOS and Linux Disassembler.
	• IDA Pro - Windows disassembler and debugger, with a free evaluation version.
	• IDR - Interactive Delphi Reconstructor is a decompiler of Delphi executable files and dynamic libraries.
	• Immunity Debugger - Debugger for malware analysis and more, with a Python API.
	• ILSpy - ILSpy is the open-source .NET assembly browser and decompiler.
	• Kaitai Struct - DSL for file formats / network protocols / data structures reverse engineering and dissection, with code generation for C++, C#, Java, JavaScript, Perl, PHP, Python, Ruby.
	• LIEF - LIEF provides a cross-platform library to parse, modify and abstract ELF, PE and MachO formats.
	• ltrace - Dynamic analysis for Linux executables.
	• mac-a-mal - An automated framework for mac malware hunting.
	• objdump - Part of GNU binutils, for static analysis of Linux binaries.
	• OllyDbg - An assembly-level debugger for Windows executables.
	• OllyDumpEx - Dump memory from (unpacked) malware Windows process and store raw or rebuild PE file. This is a plugin for OllyDbg, Immunity Debugger, IDA Pro, WinDbg, and x64dbg.
	• PANDA - Platform for Architecture-Neutral Dynamic Analysis.
	• PEDA - Python Exploit Development Assistance for GDB, an enhanced display with added commands.
	• pestudio - Perform static analysis of Windows executables.
	• Pharos - The Pharos binary analysis framework can be used to perform automated static analysis of binaries.
	• plasma - Interactive disassembler for x86/ARM/MIPS.
	• PPEE (puppy) - A Professional PE file Explorer for reversers, malware researchers and those who want to statically inspect PE files in more detail.
	• Process Explorer - Advanced task manager for Windows.
	• Process Hacker - Tool that monitors system resources.
	• Process Monitor - Advanced monitoring tool for Windows programs.
	• PSTools - Windows command-line tools that help manage and investigate live systems.
	• Pyew - Python tool for malware analysis.
	• PyREBox - Python scriptable reverse engineering sandbox by the Talos team at Cisco.
	• QKD - QEMU with embedded WinDbg server for stealth debugging.
	• Radare2 - Reverse engineering framework, with debugger support.
	• RegShot - Registry compare utility that compares snapshots.
	• RetDec - Retargetable machine-code decompiler with an online decompilation service and API that you can use in your tools.
	• ROPMEMU - A framework to analyze, dissect and decompile complex code-reuse attacks.
	• Scylla Imports Reconstructor - Find and fix the IAT of an unpacked / dumped PE32 malware.
	• ScyllaHide - An Anti-Anti-Debug library and plugin for OllyDbg, x64dbg, IDA Pro, and TitanEngine.
	• SMRT - Sublime Malware Research Tool, a plugin for Sublime 3 to aid with malware analyis.
	• strace - Dynamic analysis for Linux executables.
	• StringSifter - A machine learning tool that automatically ranks strings based on their relevance for malware analysis.
	• Triton - A dynamic binary analysis (DBA) framework.
	• Udis86 - Disassembler library and tool for x86 and x86_64.
	• Vivisect - Python tool for malware analysis.
	• WinDbg - multipurpose debugger for the Microsoft Windows computer operating system, used to debug user mode applications, device drivers, and the kernel-mode memory dumps.
	• X64dbg - An open-source x64/x32 debugger for windows.
Network
Analyze network interactions.
	• Bro - Protocol analyzer that operates at incredible scale; both file and network protocols.
	• BroYara - Use Yara rules from Bro.
	• CapTipper - Malicious HTTP traffic explorer.
	• chopshop - Protocol analysis and decoding framework.
	• CloudShark - Web-based tool for packet analysis and malware traffic detection.
	• FakeNet-NG - Next generation dynamic network analysis tool.
	• Fiddler - Intercepting web proxy designed for "web debugging."
	• Hale - Botnet C&C monitor.
	• Haka - An open source security oriented language for describing protocols and applying security policies on (live) captured traffic.
	• HTTPReplay - Library for parsing and reading out PCAP files, including TLS streams using TLS Master Secrets (used in Cuckoo Sandbox).
	• INetSim - Network service emulation, useful when building a malware lab.
	• Laika BOSS - Laika BOSS is a file-centric malware analysis and intrusion detection system.
	• Malcolm - Malcolm is a powerful, easily deployable network traffic analysis tool suite for full packet capture artifacts (PCAP files) and Zeek logs.
	• Malcom - Malware Communications Analyzer.
	• Maltrail - A malicious traffic detection system, utilizing publicly available (black)lists containing malicious and/or generally suspicious trails and featuring an reporting and analysis interface.
	• mitmproxy - Intercept network traffic on the fly.
	• Moloch - IPv4 traffic capturing, indexing and database system.
	• NetworkMiner - Network forensic analysis tool, with a free version.
	• ngrep - Search through network traffic like grep.
	• PcapViz - Network topology and traffic visualizer.
	• Python ICAP Yara - An ICAP Server with yara scanner for URL or content.
	• Squidmagic - squidmagic is a tool designed to analyze a web-based network traffic to detect central command and control (C&C) servers and malicious sites, using Squid proxy server and Spamhaus.
	• Tcpdump - Collect network traffic.
	• tcpick - Trach and reassemble TCP streams from network traffic.
	• tcpxtract - Extract files from network traffic.
	• Wireshark - The network traffic analysis tool.
Memory Forensics
Tools for dissecting malware in memory images or running systems.
	• BlackLight - Windows/MacOS forensics client supporting hiberfil, pagefile, raw memory analysis.
	• DAMM - Differential Analysis of Malware in Memory, built on Volatility.
	• evolve - Web interface for the Volatility Memory Forensics Framework.
	• FindAES - Find AES encryption keys in memory.
	• inVtero.net - High speed memory analysis framework developed in .NET supports all Windows x64, includes code integrity and write support.
	• Muninn - A script to automate portions of analysis using Volatility, and create a readable report.
	• Rekall - Memory analysis framework, forked from Volatility in 2013.
	• TotalRecall - Script based on Volatility for automating various malware analysis tasks.
	• VolDiff - Run Volatility on memory images before and after malware execution, and report changes.
	• Volatility - Advanced memory forensics framework.
	• VolUtility - Web Interface for Volatility Memory Analysis framework.
	• WDBGARK - WinDBG Anti-RootKit Extension.
	• WinDbg - Live memory inspection and kernel debugging for Windows systems.
Windows Artifacts
	• AChoir - A live incident response script for gathering Windows artifacts.
	• python-evt - Python library for parsing Windows Event Logs.
	• python-registry - Python library for parsing registry files.
	• RegRipper (GitHub) - Plugin-based registry analysis tool.
Storage and Workflow
	• Aleph - Open Source Malware Analysis Pipeline System.
	• CRITs - Collaborative Research Into Threats, a malware and threat repository.
	• FAME - A malware analysis framework featuring a pipeline that can be extended with custom modules, which can be chained and interact with each other to perform end-to-end analysis.
	• Malwarehouse - Store, tag, and search malware.
	• Polichombr - A malware analysis platform designed to help analysts to reverse malwares collaboratively.
	• stoQ - Distributed content analysis framework with extensive plugin support, from input to output, and everything in between.
	• Viper - A binary management and analysis framework for analysts and researchers.
Miscellaneous
	• al-khaser - A PoC malware with good intentions that aimes to stress anti-malware systems.
	• CryptoKnight - Automated cryptographic algorithm reverse engineering and classification framework.
	• DC3-MWCP - The Defense Cyber Crime Center's Malware Configuration Parser framework.
	• FLARE VM - A fully customizable, Windows-based, security distribution for malware analysis.
	• MalSploitBase - A database containing exploits used by malware.
	• Malware Museum - Collection of malware programs that were distributed in the 1980s and 1990s.
	• Malware Organiser - A simple tool to organise large malicious/benign files into a organised Structure.
	• Pafish - Paranoid Fish, a demonstration tool that employs several techniques to detect sandboxes and analysis environments in the same way as malware families do.
	• REMnux - Linux distribution and docker images for malware reverse engineering and analysis.
	• Tsurugi Linux - Linux distribution designed to support your DFIR investigations, malware analysis and OSINT (Open Source INTelligence) activities.
	• Santoku Linux - Linux distribution for mobile forensics, malware analysis, and security.
Resources
Books
Essential malware analysis reading material.
	• Learning Malware Analysis - Learning Malware Analysis: Explore the concepts, tools, and techniques to analuze and investigate Windows malware
	• Malware Analyst's Cookbook and DVD - Tools and Techniques for Fighting Malicious Code.
	• Mastering Malware Analysis - Mastering Malware Analysis: The complete malware analyst's guide to combating malicious software, APT, cybercime, and IoT attacks
	• Mastering Reverse Engineering - Mastering Reverse Engineering: Re-engineer your ethical hacking skills
	• Practical Malware Analysis - The Hands-On Guide to Dissecting Malicious Software.
	• Practical Reverse Engineering - Intermediate Reverse Engineering.
	• Real Digital Forensics - Computer Security and Incident Response.
	• Rootkits and Bootkits - Rootkits and Bootkits: Reversing Modern Malware and Next Generation Threats
	• The Art of Memory Forensics - Detecting Malware and Threats in Windows, Linux, and Mac Memory.
	• The IDA Pro Book - The Unofficial Guide to the World's Most Popular Disassembler.
	• The Rootkit Arsenal - The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System
Other
	• APT Notes - A collection of papers and notes related to Advanced Persistent Threats.
	• Ember - Endgame Malware BEnchmark for Research, a repository that makes it easy to (re)create a machine learning model that can be used to predict a score for a PE file based on static analysis.
	• File Formats posters - Nice visualization of commonly used file format (including PE & ELF).
	• Honeynet Project - Honeypot tools, papers, and other resources.
	• Kernel Mode - An active community devoted to malware analysis and kernel development.
	• Malicious Software - Malware blog and resources by Lenny Zeltser.
	• Malware Analysis Search - Custom Google search engine from Corey Harrell.
	• Malware Analysis Tutorials - The Malware Analysis Tutorials by Dr. Xiang Fu, a great resource for learning practical malware analysis.
	• Malware Analysis, Threat Intelligence and Reverse Engineering - Presentation introducing the concepts of malware analysis, threat intelligence and reverse engineering. Experience or prior knowledge is not required. Labs link in description.
	• Malware Persistence - Collection of various information focused on malware persistence: detection (techniques), response, pitfalls and the log collection (tools).
	• Malware Samples and Traffic - This blog focuses on network traffic related to malware infections.
	• Malware Search+++ Firefox extension allows you to easily search some of the most popular malware databases
	• Practical Malware Analysis Starter Kit - This package contains most of the software referenced in the Practical Malware Analysis book.
	• RPISEC Malware Analysis - These are the course materials used in the Malware Analysis course at at Rensselaer Polytechnic Institute during Fall 2015.
	• WindowsIR: Malware - Harlan Carvey's page on Malware.
	• Windows Registry specification - Windows registry file format specification.
	• /r/csirt_tools - Subreddit for CSIRT tools and resources, with a malware analysis flair.
	• /r/Malware - The malware subreddit.
	• /r/ReverseEngineering - Reverse engineering subreddit, not limited to just malware.
Related Awesome Lists
	• Android Security
	• AppSec
	• CTFs
	• Forensics
	• "Hacking"
	• Honeypots
	• Industrial Control System Security
	• Incident-Response
	• Infosec
	• PCAP Tools
	• Pentesting
	• Security
	• Threat Intelligence
	• YARA

From <https://project-awesome.org/rshipp/awesome-malware-analysis> 


Websites for samples ===>>
	1. Vxvault.net
	2. Malc0de.com
	3. Any.run
	4. Virustotal.com
